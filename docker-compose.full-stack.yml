version: '3.8'

# Full Stack CRM Application Docker Compose
# Includes: Backend API, Web Frontend, Mobile App (Web Preview), Database, Cache

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: crm-sqlserver
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./acs-backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 30s

  # Backend API
  backend:
    build:
      context: ./acs-backend
      target: development
    container_name: crm-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: sqlserver://sqlserver:1433;database=acs_backend;user=sa;password=YourStrong@Passw0rd;trustServerCertificate=true
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-change-in-production
      JWT_REFRESH_SECRET: development-refresh-secret-change-in-production
      CORS_ORIGIN: "http://localhost:3001,http://localhost:5173"
      LOG_LEVEL: debug
      UPLOAD_PATH: /app/uploads
    ports:
      - "3000:3000"
    volumes:
      - ./acs-backend:/app
      - /app/node_modules
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - crm-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      timeout: 3s
      retries: 5
      start_period: 30s
      interval: 30s

  # Web Frontend
  web-frontend:
    build:
      context: ./acs-web
      target: runner
      args:
        VITE_API_URL: http://localhost:3000
        VITE_WS_URL: ws://localhost:3000
        VITE_APP_VERSION: dev
        NODE_ENV: development
    container_name: crm-web-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    networks:
      - crm-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Mobile App (Web Preview)
  mobile-app:
    build:
      context: ./caseflow-mobile
      target: web-preview
      args:
        VITE_API_URL: http://localhost:3000
        VITE_WS_URL: ws://localhost:3000
        VITE_APP_VERSION: dev
        NODE_ENV: development
    container_name: crm-mobile-app
    restart: unless-stopped
    ports:
      - "5173:80"
    networks:
      - crm-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Database Management (Adminer)
  adminer:
    image: adminer:latest
    container_name: crm-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: sqlserver
    networks:
      - crm-network
    depends_on:
      - sqlserver

  # Redis Management (Redis Commander)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: crm-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    networks:
      - crm-network
    depends_on:
      - redis

  # Nginx Reverse Proxy (Optional)
  nginx-proxy:
    image: nginx:alpine
    container_name: crm-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - crm-network
    depends_on:
      - backend
      - web-frontend
      - mobile-app
    profiles:
      - proxy

  # Log Aggregation (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: crm-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - crm-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: crm-logstash
    volumes:
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - crm-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: crm-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - crm-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
