// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// SQL Server doesn't support enums, so we'll use String fields with constraints

model User {
  id            String   @id @default(uuid())
  name          String
  username      String   @unique
  password      String   // Added for mobile auth compatibility
  passwordHash  String
  profilePhotoUrl String?
  employeeId    String   @unique
  designation   String
  department    String
  phone         String
  email         String   @unique
  role          String   @default("FIELD") // ADMIN, BACKEND, BANK, FIELD
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  devices       Device[]
  cases         Case[]
  attachments   Attachment[]
  auditLogs     AuditLog[]
  notificationTokens NotificationToken[]
  backgroundSyncQueue BackgroundSyncQueue[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Device {
  id          String   @id @default(uuid())
  deviceId    String   @unique
  platform    String   // IOS, ANDROID, WEB
  model       String
  osVersion   String
  appVersion  String
  pushToken   String?  // Added for push notifications
  isActive    Boolean  @default(true) // Added for device status
  lastActiveAt DateTime @default(now()) // Added for device activity tracking
  notificationsEnabled Boolean @default(true) // Added for notification preferences
  notificationPreferences String? @db.NVarChar(Max) // JSON string for notification preferences
  registeredAt DateTime @default(now())
  userId      String

  // Device Authentication Fields
  isApproved  Boolean  @default(false) // Device approval status
  approvedAt  DateTime? // When device was approved
  approvedBy  String?  // Admin who approved the device
  authCode    String?  // One-time authentication code for device approval
  authCodeExpiresAt DateTime? // Expiration time for auth code
  rejectedAt  DateTime? // When device was rejected
  rejectedBy  String?  // Admin who rejected the device
  rejectionReason String? // Reason for rejection

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cases     Case[]
  products  Product[]

  @@map("clients")
}

model Product {
  id        String   @id @default(uuid())
  name      String
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  verificationTypes VerificationType[]

  @@map("products")
}

model VerificationType {
  id        String   @id @default(uuid())
  name      String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cases     Case[]

  @@map("verification_types")
}

model Case {
  id                    String      @id @default(uuid())
  title                 String
  description           String      @db.Text
  customerName          String
  customerPhone         String?
  customerEmail         String?
  addressStreet         String
  addressCity           String
  addressState          String
  addressPincode        String
  latitude              Float?
  longitude             Float?
  status                String      @default("ASSIGNED") // ASSIGNED, IN_PROGRESS, COMPLETED
  verificationType      String?
  verificationData      String?     @db.NVarChar(Max) // JSON string for form data
  verificationOutcome   String?
  assignedAt            DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  completedAt           DateTime?
  priority              Int         @default(1)
  notes                 String?     @db.Text

  // Foreign Keys
  assignedToId          String
  clientId              String
  verificationTypeId    String?

  // Relations
  assignedTo            User        @relation(fields: [assignedToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  client                Client      @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  verificationTypeRef   VerificationType? @relation(fields: [verificationTypeId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  attachments           Attachment[]
  locations             Location[]
  residenceReports      ResidenceVerificationReport[]
  officeReports         OfficeVerificationReport[]
  autoSaves             AutoSave[]
  auditLogs             AuditLog[]
  backgroundSyncQueue   BackgroundSyncQueue[]

  @@map("cases")
}

model Attachment {
  id            String         @id @default(uuid())
  caseId        String
  name          String
  filename      String         // Added for mobile controller
  originalName  String         // Added for mobile controller
  type          String         // PDF, IMAGE
  mimeType      String
  size          Int
  url           String
  thumbnailUrl  String?
  uploadedAt    DateTime       @default(now())
  uploadedById  String
  description   String?
  geoLocation   String?        // Added for mobile controller - JSON string for location data

  // Relations
  case          Case           @relation(fields: [caseId], references: [id], onDelete: Cascade)
  uploadedBy    User           @relation(fields: [uploadedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("attachments")
}

model Location {
  id        String         @id @default(uuid())
  caseId    String
  latitude  Float
  longitude Float
  accuracy  Float?
  timestamp DateTime       @default(now())
  source    String         @default("GPS") // GPS, NETWORK, PASSIVE

  // Relations
  case      Case           @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("locations")
}

model ResidenceVerificationReport {
  id                    String   @id @default(uuid())
  caseId                String
  applicantName         String
  applicantPhone        String?
  applicantEmail        String?
  residenceType         String
  ownershipStatus       String
  monthlyRent           Float?
  landlordName          String?
  landlordPhone         String?
  residenceSince        DateTime?
  familyMembers         Int?
  neighborVerification  Boolean  @default(false)
  neighborName          String?
  neighborPhone         String?
  propertyCondition     String?
  accessibilityNotes    String?  @db.Text
  verificationNotes     String?  @db.Text
  recommendationStatus  String
  verifiedAt            DateTime @default(now())

  // Relations
  case                  Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("residence_verification_reports")
}

model OfficeVerificationReport {
  id                    String   @id @default(uuid())
  caseId                String
  companyName           String
  designation           String
  department            String?
  employeeId            String?
  joiningDate           DateTime?
  monthlySalary         Float?
  workingHours          String?
  hrContactName         String?
  hrContactPhone        String?
  officeAddress         String
  officeType            String
  totalEmployees        Int?
  businessNature        String?
  verificationMethod    String
  documentsSeen         String?  @db.Text
  verificationNotes     String?  @db.Text
  recommendationStatus  String
  verifiedAt            DateTime @default(now())

  // Relations
  case                  Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("office_verification_reports")
}

model AutoSave {
  id        String   @id @default(uuid())
  caseId    String
  formType  String
  formData  String   @db.NVarChar(Max) // JSON string
  timestamp DateTime @default(now())
  savedAt   DateTime @default(now()) // Added for mobile controller
  version   Int      @default(1)     // Added for mobile controller

  // Relations
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@unique([caseId, formType], name: "caseId_formType")
  @@map("auto_saves")
}

model NotificationToken {
  id           String   @id @default(uuid())
  userId       String
  deviceToken  String   @unique
  platform     String   // IOS, ANDROID
  preferences  String?  @db.NVarChar(Max) // JSON string
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_tokens")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  caseId     String?
  action     String
  entityType String?  // Type of entity being audited (USER, CASE, etc.)
  entityId   String?  // ID of the entity being audited
  details    String?  @db.NVarChar(Max) // JSON string
  ipAddress  String?  // IP address of the user
  userAgent  String?  // User agent string
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  case       Case?    @relation(fields: [caseId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("audit_logs")
}

model BackgroundSyncQueue {
  id            String     @id @default(uuid())
  userId        String
  caseId        String
  localChanges  String   @db.NVarChar(Max) // JSON string
  attachments   String?  @db.NVarChar(Max) // JSON string
  status        String     @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  attempts      Int        @default(0)
  lastError     String?    @db.Text
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  case          Case       @relation(fields: [caseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("background_sync_queue")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  deviceId  String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
